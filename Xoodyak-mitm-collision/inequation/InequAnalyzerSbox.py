# coding=UTF-8
AllPossiblesbox = {(0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1), 
(0,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,1,0),
(0,1,1,0,1,1,0,1,0,0,0,0,0,0,0,0,1,0),
(0,1,1,0,1,1,1,1,1,0,1,1,0,1,1,0,1,1), 
(0,1,1,1,1,0,0,1,1,0,0,0,0,1,0,0,0,0),
(0,1,1,1,1,0,1,1,0,0,1,0,0,0,0,0,0,0),
(0,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0),
(0,1,1,1,1,0,1,1,1,0,1,0,0,1,0,0,0,0),
(0,1,1,1,1,0,1,1,1,0,1,1,0,1,0,0,0,0),
(0,1,1,1,1,0,1,1,1,0,1,0,1,1,0,0,0,0),
(0,1,1,0,1,0,0,1,1,0,0,0,0,1,0,0,0,0),
(0,1,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0),
(0,1,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0),
(0,1,1,0,1,0,1,1,1,0,1,0,0,1,0,0,0,0),
(0,1,1,0,1,0,1,1,1,0,1,1,0,1,0,0,0,0),
(0,1,1,0,1,0,1,1,1,0,1,0,0,1,0,0,0,0),
(0,1,1,1,1,1,0,1,1,0,1,1,0,1,1,0,1,1), 
(0,1,1,1,1,1,1,1,0,0,1,0,0,0,0,0,1,0),
(0,1,1,1,1,1,1,1,0,0,1,0,0,0,0,1,1,0),
(0,1,1,1,1,1,1,1,0,0,1,1,0,0,0,0,1,0),
(0,1,1,1,1,1,0,1,0,0,1,0,0,0,0,0,1,0),
(0,1,1,1,1,1,0,1,0,0,1,0,0,0,0,0,1,0),
(0,1,1,1,1,1,0,1,0,0,1,1,0,0,0,0,1,0),
(0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,1,1), 
(0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1),
(0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1),
(0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1),
(1,1,0,0,1,1,0,1,1,0,1,0,0,0,0,0,0,0),
(1,1,0,0,1,1,1,1,0,0,0,0,0,1,0,0,0,0),
(1,1,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0),
(1,1,0,0,1,1,1,1,1,0,1,0,0,1,0,0,0,0),
(1,1,0,0,1,1,1,1,1,1,1,0,0,1,0,0,0,0),
(1,1,0,0,1,1,1,1,1,0,1,0,0,1,1,0,0,0),
(1,1,0,1,1,0,0,1,1,0,0,0,0,0,0,0,1,0),
(1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0), 
(1,1,0,1,1,0,0,1,0,0,0,0,0,0,0,0,1,0),
(1,1,0,1,1,0,1,1,1,1,1,0,1,1,0,1,1,0), 
(1,1,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0),
(1,1,0,0,1,0,1,1,0,0,0,0,0,1,0,0,0,0),
(1,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0),
(1,1,0,0,1,0,1,1,1,0,1,0,0,1,0,0,0,0),
(1,1,0,0,1,0,1,1,1,1,1,0,0,1,0,0,0,0),
(1,1,0,0,1,0,1,1,1,0,1,0,0,1,0,0,0,0),
(1,1,0,1,1,1,0,1,1,0,1,0,0,0,0,0,1,0),
(1,1,0,1,1,1,0,1,1,0,1,0,0,0,0,0,1,1),
(1,1,0,1,1,1,0,1,1,1,1,0,0,0,0,0,1,0),
(1,1,0,1,1,1,1,1,0,1,1,0,1,1,0,1,1,0), 
(1,1,0,1,1,1,0,1,0,0,1,0,0,0,0,0,1,0),
(1,1,0,1,1,1,0,1,0,0,1,0,0,0,0,0,1,0),
(1,1,0,1,1,1,0,1,0,1,1,0,0,0,0,0,1,0),
(1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0), 
(1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0),
(1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1),
(1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1),
(0,1,0,0,1,1,0,1,1,0,1,0,0,0,0,0,0,0),
(0,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0),
(0,1,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0),
(0,1,0,0,1,1,1,1,1,0,1,0,0,1,0,0,0,0),
(0,1,0,0,1,1,1,1,1,0,1,0,0,1,0,0,0,0),
(0,1,0,0,1,1,1,1,1,0,1,0,0,1,1,0,0,0),
(0,1,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0),
(0,1,0,1,1,0,1,1,0,0,1,0,0,0,0,0,0,0),
(0,1,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0),
(0,1,0,1,1,0,1,1,1,0,1,0,0,1,0,0,0,0),
(0,1,0,1,1,0,1,1,1,0,1,0,0,1,0,0,0,0),
(0,1,0,1,1,0,1,1,1,0,1,0,1,1,0,0,0,0),
(0,1,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0),
(0,1,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0),
(0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0), 
(0,1,0,0,1,0,1,1,1,0,1,0,0,1,0,0,0,0),
(0,1,0,1,1,1,0,1,1,0,1,0,0,0,0,0,1,0),
(0,1,0,1,1,1,0,1,1,0,1,0,0,0,0,0,1,1),
(0,1,0,1,1,1,0,1,1,0,1,0,0,0,0,0,1,0),
(0,1,0,1,1,1,1,1,0,0,1,0,0,0,0,0,1,0),
(0,1,0,1,1,1,1,1,0,0,1,0,0,0,0,1,1,0),
(0,1,0,1,1,1,1,1,0,0,1,0,0,0,0,0,1,0),
(0,1,0,1,1,1,0,1,0,0,1,0,0,0,0,0,1,0),
(0,1,0,1,1,1,1,1,1,0,1,0,1,1,1,0,1,0),
(0,1,0,1,1,1,1,1,1,0,1,0,0,1,0,1,1,1),
(0,1,0,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1),
(1,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1), 
(1,1,1,0,1,1,1,1,0,0,0,0,0,1,0,0,1,0),
(1,1,1,0,1,1,1,1,0,0,0,0,0,1,1,0,1,0),
(1,1,1,0,1,1,1,1,0,0,0,0,0,1,0,1,1,0),
(1,1,1,0,1,1,0,1,0,0,0,0,0,1,0,0,1,0),
(1,1,1,0,1,1,0,1,0,0,0,0,0,1,1,0,1,0),
(1,1,1,0,1,1,0,1,0,0,0,0,0,1,0,0,1,0),
(1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,0,1,1), 
(1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1),
(1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1),
(1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1),
(1,1,1,1,1,0,0,1,1,0,0,0,0,1,0,0,1,0),
(1,1,1,1,1,0,0,1,1,0,0,0,1,1,0,0,1,0),
(1,1,1,1,1,0,0,1,1,0,0,0,0,1,0,0,1,1),
(1,1,1,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0), 
(1,1,1,1,1,0,0,1,0,0,0,0,0,1,0,0,1,0),
(1,1,1,1,1,0,0,1,0,0,0,0,1,1,0,0,1,0),
(1,1,1,1,1,0,0,1,0,0,0,0,0,1,0,0,1,0),
(1,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,0), 
(1,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1),
(1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0),
(1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1),
(1,1,1,0,1,0,0,1,1,0,0,0,0,1,0,0,1,0),
(1,1,1,0,1,0,0,1,1,0,0,0,0,1,0,0,1,0),
(1,1,1,0,1,0,0,1,1,0,0,0,0,1,0,0,1,1),
(1,1,1,0,1,0,1,1,0,0,0,0,0,1,0,0,1,0),
(1,1,1,0,1,0,1,1,0,0,0,0,0,1,0,0,1,0),
(1,1,1,0,1,0,1,1,0,0,0,0,0,1,0,1,1,0),
(1,1,1,0,1,0,0,1,0,0,0,0,0,1,0,0,1,0),
(1,1,1,0,1,0,1,1,1,0,1,0,0,1,0,1,1,1),
(1,1,1,0,1,0,1,1,1,1,1,1,0,1,0,0,1,0),
(1,1,1,0,1,0,1,1,1,1,1,1,0,1,0,1,1,1),
(1,1,1,1,1,1,0,1,1,0,1,1,0,1,1,0,1,1), 
(1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1),
(1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1),
(1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1),
(1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,1,1,0), 
(1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,0),
(1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0),
(1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0),
(1,1,1,1,1,1,0,1,0,1,1,1,0,1,0,0,1,0),
(1,1,1,1,1,1,0,1,0,0,1,0,1,1,1,0,1,0),
(1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,0,1,0),
(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)}

colormap=[0,3,6,2,7]

def buildWholeVectorSpace():
	space = []
	for x1 in {1,2,3,4}:
		for x2 in {1,2,3,4}:
			for x3 in {1,2,3,4}:
				for x4 in {0,1,2,3,4}:
					for x5 in {0,1,2,3,4}:
						for x6 in {0,1,2,3,4}:
							y1=colormap[x1]
							y2=colormap[x2]
							y3=colormap[x3]
							y4=colormap[x4]
							y5=colormap[x5]
							y6=colormap[x6]
							space.append(((y1>>2)&0x1,(y1>>1)&0x1,y1&0x1,(y2>>2)&0x1,(y2>>1)&0x1,y2&0x1,(y3>>2)&0x1,(y3>>1)&0x1,y3&0x1,(y4>>2)&0x1,(y4>>1)&0x1,y4&0x1,(y5>>2)&0x1,(y5>>1)&0x1,y5&0x1,(y6>>2)&0x1,(y6>>1)&0x1,y6&0x1))
	return set(space)



def build_Impossible():
	return (buildWholeVectorSpace() - AllPossiblesbox)
        #return (buildWholeVectorSpace())


def isSat(point, ineq):
	assert(len(point) == 18)
	assert(len(ineq) == 19)

	temp = point[0]*ineq[0] + point[1]*ineq[1] + point[2]*ineq[2] + point[3]*ineq[3] +\
	       point[4]*ineq[4] + point[5]*ineq[5] + point[6]*ineq[6] + point[7]*ineq[7] +\
		   + point[8]*ineq[8] + point[9]*ineq[9] + point[10]*ineq[10] + point[11]*ineq[11]  + point[12]*ineq[12] + point[13]*ineq[13] +\
	       point[14]*ineq[14] + point[15]*ineq[15] + point[16]*ineq[16] + point[17]*ineq[17]  +ineq[18]
	return ( temp >= 0)

def collectCuttOffs(points, ineq):
	result = []
	for x in points:
		if (not isSat(x, ineq)):
			result.append(x)

	return set(result)


def best_Cutting_Ineq(points, ineqs):
	best = 0
	temp = 0
	for ineq in ineqs:
		number_of_removed_points = len(collectCuttOffs(points, ineq))
		if number_of_removed_points > temp:
			temp = number_of_removed_points
			best = ineq

	return best, collectCuttOffs(points, best)


def greedy_Seclection(ineqs, N, base_points):
	current_best = 0
	current_base = base_points
	current_ineqs = ineqs

	result = []

	for i in range(0, N):
		current_best = best_Cutting_Ineq(current_base, current_ineqs)
		current_base = current_base - current_best[1]
		current_ineqs = current_ineqs - {current_best[0]}

		result.append(current_best)

	return result

# 'An inequality (1, 0, 0, 0, 0, 1, -1, 0, 0 , 0) x + 3 >= 0' ---> (1, 0, 0, 0, 0, 1, -1, 0, 0, 0, 3)

def record2Ineq(s):
	temp = s.strip()
	temp = temp.replace('An inequality', ' ')
	temp = temp.replace(',' , ' ')
	temp = temp.replace('>= 0', ' ')
	temp = temp.replace('+' , ' ')
	temp = temp.replace(') x', ' ')
	temp = temp.replace('(', ' ')
	temp = temp.split()

	for j in range(0, len(temp)):
		temp[j] = int(temp[j])
	#print(temp)
	if tuple(temp) == ():print(s)

	return tuple(temp)



def convexHullParser(input_file):
	f = open(input_file,'r')

	result = list()
	for line in f:
	    result.append(record2Ineq(line))
	f.close()

	return set(result)

if __name__ == "__main__":
	Ineqs = convexHullParser('test_equ.txt')
	#for x in Ineqs: print(x)
	#Points = interestedSpace() - {(0,0,0,0,0,0,0,0,0,0)}
	Points = build_Impossible()
	#for x in Points: print(x)
	Select = greedy_Seclection(Ineqs, 50, Points)

	for t in Select:print(t[0], end = ',\\\n')
